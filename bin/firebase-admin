#!/usr/bin/env node

'use strict';

var optometrist = require('optometrist'),
  prompt = require('prompt'),
  Q = require('q'),
  FirebaseAccount = require('../account'),
  program = require('commander'),
  chalk = require('chalk'),
  pk = require('../package.json');


program
  .version(pk.version)
  .usage('[options] command...')
  .option(
    '-a, --firebase-admin-token <token>',
    'Firebase admin token, if not in env.FIREBASE_ADMIN_TOKEN'
  )
  .option(
    '-i, --firebase-instance <name>',
    'Firebase instance to run command on, if applicable'
  )
  .parse(process.argv);

program.on('--help', function() {
  console.log('  Commands:');
  console.log('');
  console.log('    login: get administrative token for future use');
  console.log('    bootstrap: create new database with random name');
  console.log('    create [name]: create new Firebase');
  console.log('    delete [name]: remove existing Firebase');
  console.log('');

  console.log('    rules get [filename=STDOUT]: get security rules');
  console.log('    rules set [filename]: set security rules');
  console.log('');

  console.log('    auth-config get [FILENAME=STDOUT]: get auth configuration');
  console.log('    auth-config set [filename]: set auth configuration');
  console.log('');

  console.log('    token add: add authentication token to this Firebase');
  console.log('    token remove [token]: remove auth token from this Firebase');
  console.log('');

  console.log('    user list: list all Simple Login users');
  console.log('    user add [username]: add user to Simple Login');
  console.log('    user remove [username]: remove user from Simple Login');
  console.log('    user reset [username]: send password reset email');
  console.log('');
});

var adminToken = program.firebaseAdminToken || process.env.FIREBASE_ADMIN_TOKEN;
var account;
var ready;

var accountCommands = require('../lib/commands/account');
var instanceCommands = require('../lib/commands/instance');

if (program.args.length === 0) {
  program.help();
}


if (adminToken) {
  ready = Q.when(adminToken);
} else {

  var deferred = Q.defer();

  // exchange username and password for admin token
  prompt.message = prompt.delimiter = '';
  prompt.get([{
    description: 'Firebase username:',
    name: 'firebaseUser',
    required: true
  }, {
    description: 'Password (hidden):',
    name: 'firebasePass',
    hidden: true,
    required: true
  }], function(err, result) {

    if (err) {
      deferred.reject(err);
    } else {

      var tokenPromise = FirebaseAccount.getToken(
        result.firebaseUser,
        result.firebasePass
      );

      deferred.resolve(tokenPromise);

    }

  });

  ready = deferred.promise;

}

ready
.then(function(token) {

  adminToken = token;
  account = new FirebaseAccount(token);
  var command = program.args[0];
  if (accountCommands[command]) {

    return accountCommands[command]
    .apply(this, [account].concat(program.args.slice(1)));

  } else if (instanceCommands[command]) {

    if (program.firebaseInstance) {

      return account.getDatabase(program.firebaseInstance)
      .then(function(instance) {

        return instanceCommands[command]
        .apply(this, [instance].concat(program.args.slice(1)));

      });

    } else {
      throw new Error('You must specify an instance for ' + command + ' with -i');
    }

  } else {
    program.help();
  }

})
.catch(function(err) {

  console.log(chalk.red.bold(err.message));
  program.help();

});
